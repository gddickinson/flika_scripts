#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 27 20:32:36 2022

@author: george
"""

import numpy as np
import pandas as pd

from tqdm import tqdm
import os, glob


import math

from scipy import stats



# Radius of Gyration and Asymmetry
def RadiusGyrationAsymmetrySkewnessKurtosis(trackDF):
    # Drop any skipped frames and convert trackDF to XY array
    points_array = np.array(trackDF[['x', 'y']].dropna())  
    # get Rg etc using Vivek's codes
    center = points_array.mean(0)
    normed_points = points_array - center[None, :]
    radiusGyration_tensor = np.einsum('im,in->mn', normed_points, normed_points)/len(points_array)
    eig_values, eig_vectors = np.linalg.eig(radiusGyration_tensor)
    radius_gyration_value = np.sqrt(np.sum(eig_values))
    asymmetry_numerator = pow((eig_values[0] - eig_values[1]), 2)
    asymmetry_denominator = 2 * (pow((eig_values[0] + eig_values[1]), 2))
    asymmetry_value = - math.log(1 - (asymmetry_numerator / asymmetry_denominator))
    maxcol = list(eig_values).index(max(eig_values))
    dominant_eig_vect = eig_vectors[:, maxcol]
    points_a = points_array[:-1]
    points_b = points_array[1:]
    ba = points_b - points_a
    proj_ba_dom_eig_vect = np.dot(ba, dominant_eig_vect) / np.power(np.linalg.norm(dominant_eig_vect), 2)
    skewness_value = stats.skew(proj_ba_dom_eig_vect)
    kurtosis_value = stats.kurtosis(proj_ba_dom_eig_vect)
    return radius_gyration_value, asymmetry_value, skewness_value, kurtosis_value


def getRadiusGyrationForAllTracksinDF(tracksDF):
    tracksToTest = tracksDF['track_number'].tolist()
    idTested = []
    radius_gyration_list=[] 
    asymmetry_list=[] 
    skewness_list=[] 
    kurtosis_list=[]  
    trackIntensity_mean = []
    trackIntensity_std = []
    
    for i in range(len(tracksToTest)):
        idToTest = tracksToTest[i]
        if idToTest not in idTested:
            radius_gyration_value, asymmetry_value, skewness_value, kurtosis_value = RadiusGyrationAsymmetrySkewnessKurtosis(tracksDF[tracksDF['track_number']==idToTest])
            idTested.append(idToTest)
            #print(radius_gyration_value, asymmetry_value, skewness_value, kurtosis_value)
            print('\r' + 'RG analysis complete for track {} of {}'.format(idToTest,max(tracksToTest)), end='\r')
            
        radius_gyration_list.append(radius_gyration_value) 
        asymmetry_list.append(asymmetry_value) 
        skewness_list.append(skewness_value)
        kurtosis_list.append(kurtosis_value) 
        
        trackIntensity_mean.append(np.mean(tracksDF[tracksDF['track_number']==idToTest]['intensity']))
        trackIntensity_std.append(np.std(tracksDF[tracksDF['track_number']==idToTest]['intensity']))    
        
            
    tracksDF['radius_gyration'] = radius_gyration_list
    tracksDF['asymmetry'] = asymmetry_list
    tracksDF['skewness'] = skewness_list
    tracksDF['kurtosis'] = kurtosis_list 
    tracksDF['track_intensity_mean'] = trackIntensity_mean
    tracksDF['track_intensity_std'] = trackIntensity_std
    
    return tracksDF



def calcRGforFiles(tracksList, minNumberSegments=1):
    for trackFile in tqdm(tracksList):
                
            ##### load data
            tracksDF = pd.read_csv(trackFile)

            #add number of segments for each Track row
            tracksDF['n_segments'] = tracksDF.groupby('track_number')['track_number'].transform('count')
            
            if minNumberSegments !=0:
            #filter by number of track segments
                tracksDF = tracksDF[tracksDF['n_segments'] > minNumberSegments]
    
            #add Rg values to df
            tracksDF = getRadiusGyrationForAllTracksinDF(tracksDF)
        
            #saveRg DF
            saveName = os.path.splitext(trackFile)[0] + 'RG.csv'
            tracksDF.to_csv(saveName)
            print('\n new tracks file exported to {}'.format(saveName))    


if __name__ == '__main__':
    ##### RUN ANALYSIS        
    path = '/Users/george/Data/10msExposure10s'
    
    #get folder paths
    tracksList = glob.glob(path + '/**/*_bin10_locs_tracks.csv', recursive = True)   
    
    #run analysis - filter for track lengths > 5
    calcRGforFiles(tracksList, minNumberSegments=5)
            
            